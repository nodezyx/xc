const axios = require("axios");
const FormData = require('form-data');
const fs = require('fs');
const os = require('os');
const path = require("path");
const { cmd } = require("../command");

// Helper function to format bytes
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

cmd({
    pattern: "imagescan",
    alias: ["vision", "analyse", "analyze", "analyzeimg"],
    react: 'üîç',
    use: "Scan and analyze images using Gemini Vision AI",
    category: "tool",
    desc: ".imagescan [reply to image] <question>",
    filename: __filename
}, async (client, message, { reply, quoted, text }) => {
    try {
        // Check if quoted message exists and has media
        const quotedMsg = quoted || message;
        const mimeType = (quotedMsg.msg || quotedMsg).mimetype || '';

        if (!mimeType || !mimeType.startsWith('image/')) {  
            return reply("Please reply to an image file (JPEG/PNG)");  
        }  

        // Download the media  
        const mediaBuffer = await quotedMsg.download();  
        const fileSize = formatBytes(mediaBuffer.length);  
        
        // Get file extension based on mime type  
        let extension = '';  
        if (mimeType.includes('image/jpeg')) extension = '.jpg';  
        else if (mimeType.includes('image/png')) extension = '.png';  
        else {  
            return reply("Unsupported image format. Please use JPEG or PNG");  
        }  

        const tempFilePath = path.join(os.tmpdir(), `imgscan_${Date.now()}${extension}`);  
        fs.writeFileSync(tempFilePath, mediaBuffer);  

        // Upload to Catbox  
        const form = new FormData();  
        form.append('fileToUpload', fs.createReadStream(tempFilePath), `image${extension}`);  
        form.append('reqtype', 'fileupload');  

        const uploadResponse = await axios.post("https://catbox.moe/user/api.php", form, {  
            headers: form.getHeaders()  
        });  

        const imageUrl = uploadResponse.data;  
        fs.unlinkSync(tempFilePath); // Clean up temp file  

        if (!imageUrl) {  
            throw "Failed to upload image to Catbox";  
        }  

        // Extract question from message (text after command)
        const question = text.trim() || "What's in this image?";
        
        // Analyze the image using Gemini Vision API
        const apiUrl = `https://kaiz-apis.gleeze.com/api/gemini-vision?q=${encodeURIComponent(question)}&uid=1234&imageUrl=${encodeURIComponent(imageUrl)}&apikey=cf2ca612-296f-45ba-abbc-473f18f991eb`;
        
        const { data } = await axios.get(apiUrl);
        
        if (!data || !data.response) {
            throw "Failed to analyze image. No response from AI.";
        }

        // Format the response
        await reply(
            `üîç *Image Analysis Results*\n\n` +
            `*Question:* ${question}\n\n` +
            `${data.response}\n\n` +
            `> ¬© Generated by Subzero MD`
        );

    } catch (error) {
        console.error('Image Scan Error:', error);
        await reply(`‚ùå Error: ${error.message || error}`);
    }
});





