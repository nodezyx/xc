const axios = require("axios");
const FormData = require('form-data');
const fs = require('fs');
const os = require('os');
const path = require("path");
const { cmd } = require("../command");

// Helper function to format bytes
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function uploadImageToCatbox(fileBuffer, mimeType) {
    // Get file extension based on mime type  
    let extension = '';  
    if (mimeType.includes('image/jpeg')) extension = '.jpg';  
    else if (mimeType.includes('image/png')) extension = '.png';  
    else {  
        throw "Unsupported image format. Please use JPEG or PNG";  
    }  

    const tempFilePath = path.join(os.tmpdir(), `gpt4o_${Date.now()}${extension}`);  
    fs.writeFileSync(tempFilePath, fileBuffer);  

    // Upload to Catbox  
    const form = new FormData();  
    form.append('fileToUpload', fs.createReadStream(tempFilePath), `image${extension}`);  
    form.append('reqtype', 'fileupload');  

    const uploadResponse = await axios.post("https://catbox.moe/user/api.php", form, {  
        headers: form.getHeaders()  
    });  

    fs.unlinkSync(tempFilePath); // Clean up temp file  

    if (!uploadResponse.data) {  
        throw "Failed to upload image to Catbox";  
    }  

    return uploadResponse.data;
}

cmd({
    pattern: "vision2",
    alias: ["analuse2", "gptovision"],
    react: 'ü§ñ',
    use: "GPT-4o Pro with optional image analysis",
    category: "tool",
    desc: ".gpt4opro <question> [reply to image]",
    filename: __filename
}, async (client, message, { reply, quoted, text }) => {
    try {
        let imageUrl = '';
        const question = text.trim() || "Hello, how can you help me?";

        // Check if there's a quoted image
        if (quoted) {
            const quotedMsg = quoted;
            const mimeType = (quotedMsg.msg || quotedMsg).mimetype || '';
            
            if (mimeType && mimeType.startsWith('image/')) {
                // Download and upload the image
                const mediaBuffer = await quotedMsg.download();  
                imageUrl = await uploadImageToCatbox(mediaBuffer, mimeType);
            }
        }

        // Call GPT-4o Pro API
        const apiUrl = `https://kaiz-apis.gleeze.com/api/gpt-4o-pro?` +
                      `ask=${encodeURIComponent(question)}` +
                      `&uid=1234` +
                      (imageUrl ? `&imageUrl=${encodeURIComponent(imageUrl)}` : '') +
                      `&apikey=cf2ca612-296f-45ba-abbc-473f18f991eb`;
        
        const { data } = await axios.get(apiUrl);
        
        if (!data || !data.response) {
            throw "Failed to get response from GPT-4o Pro";
        }

        // Format the response
        let responseText = `ü§ñ *GPT-4o Pro Response*\n\n`;
        if (imageUrl) responseText += `üì∑ *Image Analyzed:* Yes\n\n`;
        responseText += `${data.response}\n\n` +
                       `> ¬© Generated by Subzero MD`;

        await reply(responseText);

    } catch (error) {
        console.error('GPT-4o Pro Error:', error);
        await reply(`‚ùå Error: ${error.message || error}`);
    }
});
